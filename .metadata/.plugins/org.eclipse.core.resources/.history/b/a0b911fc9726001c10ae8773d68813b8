package es.cfc.persistencia;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import es.cfc.models.Producto;

public class ProductosDAOImpl implements ProductosDAO {

	private Connection conexion;

	private void abrirConexion() {
		try {
			Class.forName("com.mysql.jdbc.Driver"); // Cargar el driver de MySQL
			conexion = DriverManager.getConnection("jdbc:mysql://localhost/tienda", "root", ""); // Abrir la conexi√≥n
		} catch (ClassNotFoundException e) {
			System.out.println("Error al cargar el driver");
			e.printStackTrace();
		} catch (SQLException e) {
			System.out.println("Error al abrir la conexion");
			e.printStackTrace();
		}
	}

	private void cerrarConexion() {
		try {
			conexion.close();
		} catch (SQLException e) {
			System.out.println("Error al cerrar la conexion");
			e.printStackTrace();
		}
	}

	@Override
	public List<Producto> verTodos() {
		List<Producto> lista = new ArrayList<Producto>();

		try {
			abrirConexion();

			Statement stm = conexion.createStatement();
			ResultSet rs = stm.executeQuery("SELECT * FROM productos;");

			while (rs.next()) {
				Producto producto = new Producto(rs.getInt("ID"), rs.getString("DESCRIPCION"), rs.getDouble("PRECIO"));
				lista.add(producto);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			cerrarConexion();
		}

		return lista;
	}

	@Override
	public Producto buscar(int id) {
		Producto productoEncontrado = null;

		try {
			abrirConexion();

			String query = "SELECT * FROM productos WHERE ID = ?;";
			PreparedStatement pst = conexion.prepareStatement(query);
			pst.setInt(1, id);
			ResultSet rs = pst.executeQuery();
			if(rs.next()) {
				productoEncontrado = new Producto(rs.getInt("ID"), rs.getString("DESCRIPCION"), rs.getDouble("PRECIO"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			cerrarConexion();
		}
		
		return productoEncontrado;
	}

	@Override
	public boolean insertar(Producto nuevoProducto) {
		try {
			abrirConexion();

			String query = "INSERT INTO productos VALUES (?, ?, ?);";
			PreparedStatement pst = conexion.prepareStatement(query);
			pst.setInt(1, nuevoProducto.getId());
			pst.setString(2, nuevoProducto.getDescripcion());
			pst.setDouble(3, nuevoProducto.getPrecio());
			int registros = pst.execute(); 

			if (registros > 0) {
				return true;
			} else {
				return false;
			}

		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		} finally {
			cerrarConexion();
		}
	}

	@Override
	public boolean modificar(int id, double precio) {
		try {
			abrirConexion();
			
			String query = "UPDATE productos SET PRECIO = ? WHERE ID = ?;";
			PreparedStatement pst = conexion.prepareStatement(query);
			pst.setDouble(1, precio);
			pst.setInt(2, id);
			int registros = pst.executeUpdate();
			if (registros > 0) {
				return true;
			} else {
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		} finally {
			cerrarConexion();
		}
	}

	@Override
	public boolean eliminar(int id) {
		return false;
		/*
		try {
			abrirConexion();

			String query = "INSERT INTO productos VALUES (?, ?, ?);";
			PreparedStatement pst = conexion.prepareStatement(query);
			pst.setInt(1, nuevoProducto.getId());
			pst.setString(2, nuevoProducto.getDescripcion());
			pst.setDouble(3, nuevoProducto.getPrecio());
			boolean result = pst.execute(); 
			return result;

		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		} finally {
			cerrarConexion();
		}
		*/
	}

}
